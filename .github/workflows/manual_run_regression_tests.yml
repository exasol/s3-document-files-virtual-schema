name: Regression Tests

on:
  workflow_dispatch:
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Print tag name
        run: echo ${{ github.event.release.tag_name }}
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Create AWS test setup
        run: |
          echo "owner = \"$OWNER\"" > cloudSetup/terraform.tfvars
          echo "deputy = \"$DEPUTY\"" >> cloudSetup/terraform.tfvars
          terraform -chdir=cloudSetup/ init
          terraform -chdir=cloudSetup/ apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          OWNER: ${{ secrets.AWS_TAG_OWNER }}
          DEPUTY: ${{ secrets.AWS_TAG_DEPUTY }}
      - name: Run tests and build with Maven
        run: mvn --batch-mode --update-snapshots clean verify -X -DtrimStackTrace=false -PregressionTests -Dtest.coverage=false
        env:
          GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-central-1"
      - name: Destroy cluster
        run: terraform -chdir=cloudSetup/ destroy -auto-approve
        if: always() # also run if tests failed
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Upload regression test result
        uses: actions/upload-artifact@v2
        with:
          name: performance-test-results
          path: target/performanceLog-*.csv
      - name: Upload results to Exasol DB
        run: |
          curl https://www.exasol.com/support/secure/attachment/161224/EXAplus-7.1.1.tar.gz -o exaplus.tar.gz
          echo "c950b321eecf82456c8d4414a212fd2d89a1f877b914c5143ed0cdfda7f88c3f20cfc510d8b865f633fcad38f8f90d818db9a9934c4593f8ecb050edbdfce56a  exaplus.tar.gz" | sha512sum -c
          tar -xvzf exaplus.tar.gz
          cp target/performanceLog-*.csv target/performanceLog.csv
          # add release name column ($ matches end of line)
          sed "s/\$/,\"$RELEASE_NAME\"/" target/performanceLog.csv > target/performanceLogWithReleaseName.csv
          EXAplus-7.1.1/exaplus -c demodb.exasol.com -u ${{ secrets.DEMODB_LOG_SUBMIT_USER }} -p ${{ secrets.DEMODB_LOG_SUBMIT_PASS }} -sql "IMPORT INTO EXASOL_JABR.REGRESSION_TEST_RESULTS  FROM LOCAL CSV FILE './target/performanceLogWithReleaseName.csv' COLUMN SEPARATOR = ',' SKIP = 1;"
        env:
          RELEASE_NAME: "${{ github.event.release.tag_name }}"